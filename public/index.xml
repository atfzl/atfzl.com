<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Atif Afzal</title>
    <link>https://atfzl.com/</link>
    <description>Recent content on Atif Afzal</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 06 Mar 2025 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://atfzl.com/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Writing in the LLM Era</title>
      <link>https://atfzl.com/articles/writing-in-llm-era/</link>
      <pubDate>Thu, 06 Mar 2025 00:00:00 +0000</pubDate>
      <guid>https://atfzl.com/articles/writing-in-llm-era/</guid>
      <description>Web is filled with LLM generated trash. Looking all too similar, with too many hallucinations, with no real value. I am fed up of web having the same content regurgitated by everyone. Are these people writing for Humans to read or just for the sake of having content on the web?&#xA;Reading anything which resembles LLM generated text gives me the ick. It immediately loses credibility. I&amp;rsquo;d rather read some experts content with not so good writing than a noob with no new knowledge with perfect english.</description>
    </item>
    <item>
      <title>Matching fonts with Figma</title>
      <link>https://atfzl.com/articles/matching-fonts-with-figma/</link>
      <pubDate>Sat, 01 Mar 2025 00:00:00 +0000</pubDate>
      <guid>https://atfzl.com/articles/matching-fonts-with-figma/</guid>
      <description>When I joined Clazar, I noticed that the fonts in our web application looked bolder than on Figma. The font weights and all other config was same as in Figma but, it looked different. The font looked bolder than on Figma.&#xA;Because I knew Figma is also a web app, I had a hunch that Figma might have anti-aliasing enabled and we had not. This was actually true when I tried it out.</description>
    </item>
    <item>
      <title>Notes: Unmasking Autism</title>
      <link>https://atfzl.com/articles/unmasking-autism/</link>
      <pubDate>Thu, 20 Feb 2025 00:00:00 +0000</pubDate>
      <guid>https://atfzl.com/articles/unmasking-autism/</guid>
      <description>Author: Devon Price | Book Link&#xA;Autism is a disability which cannot be cured Autistic people have to accept it and live accordingly. They should try to frame their life according to their disability. It could be the flexibility at their workplace, how their home is organized etc. People with Autism have diverse symptoms Not comfortable in loud environments but some may need over stimulation. Emotionally dissonant. Not able to understand social cues.</description>
    </item>
    <item>
      <title>HTTP 0.9</title>
      <link>https://atfzl.com/articles/http-09/</link>
      <pubDate>Sat, 25 Jan 2025 00:00:00 +0000</pubDate>
      <guid>https://atfzl.com/articles/http-09/</guid>
      <description>The first version of Hyper Text Transfer Protocol (HTTP) Simple protocol without any headers Supported only GET method Request GET /index.html Response &amp;lt;h1&amp;gt;Hello World&amp;lt;/h1&amp;gt; Server: const net = require(&#39;net&#39;); net .createServer((socket) =&amp;gt; { socket.on(&#39;data&#39;, (data) =&amp;gt; { if (data.toString() === &#39;GET /index.html\r\n&#39;) { socket.write(&#39;&amp;lt;h1&amp;gt;Hello World&amp;lt;/h1&amp;gt;&#39;); } socket.end(); }); }) .listen(8080); Client: const net = require(&#39;net&#39;); const client = new net.Socket(); client.connect(&#39;8080&#39;, &#39;localhost&#39;, () =&amp;gt; { client.write(&#39;GET index.html\r\n&#39;); }); client.on(&#39;data&#39;, (data) =&amp;gt; { console.</description>
    </item>
    <item>
      <title>Create Require</title>
      <link>https://atfzl.com/articles/create-require/</link>
      <pubDate>Wed, 11 Sep 2024 00:00:00 +0000</pubDate>
      <guid>https://atfzl.com/articles/create-require/</guid>
      <description>import { createRequire } from &#39;module&#39; const require = createRequire(import.meta.url); </description>
    </item>
    <item>
      <title>Git Blame</title>
      <link>https://atfzl.com/articles/git-blame/</link>
      <pubDate>Fri, 06 Sep 2024 00:00:00 +0000</pubDate>
      <guid>https://atfzl.com/articles/git-blame/</guid>
      <description>git blame -w ignores whitespaces&#xA;git blame -C checks for code movements between files in a commit.&#xA;Can use multiple -C:&#xA;git blame -w -C -C -C&#xA;Source: https://blog.gitbutler.com/git-tips-1-theres-a-git-config-for-that/</description>
    </item>
    <item>
      <title>JavaScript Event Loop: The Definitive Edition</title>
      <link>https://atfzl.com/articles/javascript-event-loop/</link>
      <pubDate>Wed, 08 Mar 2023 00:00:00 +0000</pubDate>
      <guid>https://atfzl.com/articles/javascript-event-loop/</guid>
      <description>Note: We&amp;rsquo;ll cover the event loop in context of browsers and not other runtimes like Node.js&#xA;The event loop is a mechanism/algorithm/set of rules that specifies how asynchronous code is handled in JavaScript. This is important because JavaScript is single threaded, it can run one thing at a time. When the main thread is busy, we queue the pending events and these are run later when the main thread is available.</description>
    </item>
    <item>
      <title>Making Cypress Integration Tests Less Flaky</title>
      <link>https://atfzl.com/articles/making-cypress-integration-tests-less-flaky/</link>
      <pubDate>Tue, 01 Feb 2022 00:00:00 +0000</pubDate>
      <guid>https://atfzl.com/articles/making-cypress-integration-tests-less-flaky/</guid>
      <description>TL;DR Interleave Cypress commands like .find, .get, .first, .eq, .type with Cypress assertions like .should, .contains. Cypress runs only the last command when retrying. Interleaving act as guards to ensure we reach to the correct element which also helps avoiding detached parent errors.&#xA;Don&amp;rsquo;t just wait for network calls, wait for the UI to be updated with the network data. If a network call has finished, it doesn&amp;rsquo;t mean the UI would be updated immediately.</description>
    </item>
    <item>
      <title>Optimizing Netlify</title>
      <link>https://atfzl.com/articles/optimizing-netlify/</link>
      <pubDate>Mon, 06 Sep 2021 00:00:00 +0000</pubDate>
      <guid>https://atfzl.com/articles/optimizing-netlify/</guid>
      <description>We&amp;rsquo;ll optimize Netlify&amp;rsquo;s Single Page web application load time.&#xA;Log in to https://netlify.com.&#xA;You&amp;rsquo;ll be redirected to https://app.netlify.com after logging in. This is the SPA we&amp;rsquo;ll be optimizing.&#xA;Open Chrome DevTools (cmd + options + i)&#xA;Select Performance Panel\&#xA;Make sure Screenshot option selected (useful to check when app was loaded)&#xA;Start recording and refresh the page. Stop the recording when the page has loaded. We have the DevTools open in detached mode to view the timeline.</description>
    </item>
    <item>
      <title>Don&#39;t attach tooltips to document.body</title>
      <link>https://atfzl.com/articles/don-t-attach-tooltips-to-document-body/</link>
      <pubDate>Wed, 10 Mar 2021 00:00:00 +0000</pubDate>
      <guid>https://atfzl.com/articles/don-t-attach-tooltips-to-document-body/</guid>
      <description>TL;DR Instead of attaching tooltips directly to document.body, attach them to a predefined div in document.body.&#xA;BAD&#xA;&amp;lt;body&amp;gt; &amp;lt;!-- temporary div, vanishes when tooltips vanishes --&amp;gt; &amp;lt;div&amp;gt;my tooltip&amp;lt;/div&amp;gt; &amp;lt;body&amp;gt; GOOD&#xA;&amp;lt;body&amp;gt; &amp;lt;!-- this div stays forever, just for attaching tooltips --&amp;gt; &amp;lt;div id=&amp;quot;tooltips-container&amp;quot;&amp;gt; &amp;lt;!-- temporary div, vanishes when tooltips vanishes --&amp;gt; &amp;lt;div&amp;gt;my tooltip&amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;body&amp;gt; Introduction Tooltips in our app were taking &amp;gt;80ms. And during this time, the main thread was blocked, you couldn&amp;rsquo;t interact with anything.</description>
    </item>
    <item>
      <title>Understanding Solid: JSX</title>
      <link>https://atfzl.com/articles/understanding-solid-jsx/</link>
      <pubDate>Mon, 25 Nov 2019 00:00:00 +0000</pubDate>
      <guid>https://atfzl.com/articles/understanding-solid-jsx/</guid>
      <description>Solid uses JSX to render vanilla DOM elements. In React the &amp;lt;div /&amp;gt; compiles to React.createElement(&#39;div&#39;) but in Solid you could say it compiles to document.createElement(&#39;div&#39;) (actually it uses HTML templates, more on this ahead).&#xA;Hello World component: function HelloWorld() { return ( &amp;lt;div&amp;gt; Hello World &amp;lt;/div&amp;gt; ); } This will (conceptually) compile to:&#xA;function HelloWorld() { const el$ = document.createElement(&#39;div&#39;); el$.innerText = &#39;Hello World&#39;; return el$; } Actually solid uses HTML template element because it is more performant for creating new instances from same template.</description>
    </item>
    <item>
      <title>Using iTerm triggers</title>
      <link>https://atfzl.com/articles/using-iterm-triggers/</link>
      <pubDate>Tue, 19 Nov 2019 00:00:00 +0000</pubDate>
      <guid>https://atfzl.com/articles/using-iterm-triggers/</guid>
      <description>iTerm triggers can be used for converting text in your terminal to URLs and make them clickable. This is useful for creating JIRA issue links whenever there is a JIRA-1234 like pattern.&#xA;Steps: Go to iTerm -&amp;gt; Preferences -&amp;gt; Profiles -&amp;gt; Advanced -&amp;gt; Triggers Edit&#xA;Add an entry in the table&#xA;Regular Expression: (?i)JIRA-\d+ Action: Make Hyperlink Parameters: https://jira.yourhost.com/jira/browse/\0 Now whenever there is a pattern with JIRA-1234, it will become a clickable hyperlink.</description>
    </item>
    <item>
      <title>Use emacs key bindings everywhere</title>
      <link>https://atfzl.com/articles/use-emacs-key-bindings-everywhere/</link>
      <pubDate>Tue, 12 Nov 2019 00:00:00 +0000</pubDate>
      <guid>https://atfzl.com/articles/use-emacs-key-bindings-everywhere/</guid>
      <description>I am used to emacs keybinding.&#xA;My caps lock is mapped to ctrl to avoid emacs pinky.&#xA;I am also used to making movements the emacs way , i.e.,&#xA;ctrl+f: right arrow ctrl+b: left arrow ctrl+p: up arrow ctrl+n: down arrow I have also remapped Ctrl+g to escape because I despise the escape key in the MacBook Pro touch bar.&#xA;Mac supports this keybinding in most applications but these do not work for all applications.</description>
    </item>
    <item>
      <title>Understanding Solid: Reactivity Basics</title>
      <link>https://atfzl.com/articles/understanding-solid-reactivity-basics/</link>
      <pubDate>Thu, 10 Oct 2019 00:00:00 +0000</pubDate>
      <guid>https://atfzl.com/articles/understanding-solid-reactivity-basics/</guid>
      <description>Solid is a Reactive library for creating user interfaces. Solid updates the DOM only where it is required, without using Virtual DOM. Solid is fast.&#xA;To understand Solid, first we have to understand its Reactive ideology.&#xA;Let’s take an example of a simple auto updating counter to show how the code looks like and explain how it works under the hood.&#xA;First a counter without a UI: Solid Counter - CodeSandbox</description>
    </item>
    <item>
      <title>Using flow and eslint in Emacs</title>
      <link>https://atfzl.com/articles/using-flow-and-eslint-in-emacs/</link>
      <pubDate>Sun, 06 Nov 2016 00:00:00 +0000</pubDate>
      <guid>https://atfzl.com/articles/using-flow-and-eslint-in-emacs/</guid>
      <description>(require &#39;company) (require &#39;web-mode) (require &#39;flycheck) (require &#39;flycheck-flow) ;; flow auto complete ;; skip this if you don&#39;t use company-mode (eval-after-load &#39;company &#39;(add-to-list &#39;company-backends &#39;company-flow)) ;; add eslint and flow checkers to flycheck (flycheck-add-mode &#39;javascript-eslint &#39;web-mode) (flycheck-add-mode &#39;javascript-flow &#39;web-mode) ;;disable jshint since we prefer eslint checking (setq-default flycheck-disabled-checkers (append flycheck-disabled-checkers &#39;(javascript-jshint))) (defun jsWithEslint () &amp;quot;eslint for js files&amp;quot; (interactive) (web-mode) (web-mode-set-content-type &amp;quot;jsx&amp;quot;) (flycheck-disable-checker &#39;javascript-flow) (flycheck-select-checker &#39;javascript-eslint) (flycheck-mode)) (defun jsWithEslintFlow () &amp;quot;flow and eslint for js files&amp;quot; (interactive) (web-mode) (web-mode-set-content-type &amp;quot;jsx&amp;quot;) (flycheck-select-checker &#39;javascript-eslint) (flycheck-add-next-checker &#39;javascript-eslint &#39;javascript-flow) (flycheck-mode)) ;; set key shortcuts if you want ;; (global-set-key (kbd &amp;quot;C-c j&amp;quot;) &#39;jsWithEslint) ;; (global-set-key (kbd &amp;quot;C-c f&amp;quot;) &#39;jsWithEslintFlow) (add-to-list &#39;auto-mode-alist &#39;(&amp;quot;\\.</description>
    </item>
    <item>
      <title>Reads</title>
      <link>https://atfzl.com/reads/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://atfzl.com/reads/</guid>
      <description>Reading Advanced React, Nadia Makarevich&#xA;The Pragmatic Progammer, David Thomas and Andrew Hunt&#xA;About Face (Part II: Making Well-Behaved Products), Alan Cooper, et al.&#xA;2025 About Face (Part I: Goal Oriented Design), Alan Cooper, et al.&#xA;Unmasking Autism, Devon Price&#xA;1984, George Orwell&#xA;Why Can&amp;rsquo;t I Just Enjoy Things?, Pierre Novellie&#xA;&amp;lt;= 2024 Coward, Tim Clare&#xA;Zero to One, Peter Thiel, Blake Masters&#xA;Akira Volume 2, Katsuhiro Otomo&#xA;Akira Volume 1, Katsuhiro Otomo</description>
    </item>
  </channel>
</rss>
